// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ReadyGo.Identity.Persistence.Contexts;

#nullable disable

namespace ReadyGo.Identity.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250630105629_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ReadyGo.Identity.Domain.Aggregates.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("ReadyGo.Identity.Domain.Aggregates.Scope", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Scopes");
                });

            modelBuilder.Entity("ReadyGo.Identity.Domain.Aggregates.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("ReadyGo.Identity.Domain.Aggregates.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ReadyGo.Identity.Domain.Entities.Authentication", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Authentication");
                });

            modelBuilder.Entity("ReadyGo.Identity.Domain.Entities.Authorization", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Authorization");
                });

            modelBuilder.Entity("ReadyGo.Identity.Domain.Entities.Entitlement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ScopeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("ScopeId");

                    b.ToTable("Entitlement");
                });

            modelBuilder.Entity("ReadyGo.Identity.Domain.Entities.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Profile");
                });

            modelBuilder.Entity("ReadyGo.Identity.Domain.Entities.RolePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermission");
                });

            modelBuilder.Entity("ReadyGo.Identity.Domain.Entities.ScopePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("ExpiresAt")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("ScopeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationId");

                    b.HasIndex("ScopeId");

                    b.ToTable("ScopePermission");
                });

            modelBuilder.Entity("ReadyGo.Identity.Persistence.Entities.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<long?>("LockedAt")
                        .HasColumnType("bigint");

                    b.Property<long?>("LockedUntil")
                        .HasColumnType("bigint");

                    b.Property<int>("Locktime")
                        .HasColumnType("int");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Processed")
                        .HasColumnType("bit");

                    b.Property<Guid>("StreamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Outbox");
                });

            modelBuilder.Entity("ReadyGo.Identity.Domain.Aggregates.Scope", b =>
                {
                    b.OwnsOne("ReadyGo.Identity.Domain.ValueObjects.Action", "Action", b1 =>
                        {
                            b1.Property<Guid>("ScopeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Action");

                            b1.HasKey("ScopeId");

                            b1.ToTable("Scopes");

                            b1.WithOwner()
                                .HasForeignKey("ScopeId");
                        });

                    b.OwnsOne("ReadyGo.Identity.Domain.ValueObjects.Resource", "Resource", b1 =>
                        {
                            b1.Property<Guid>("ScopeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Resource");

                            b1.HasKey("ScopeId");

                            b1.ToTable("Scopes");

                            b1.WithOwner()
                                .HasForeignKey("ScopeId");
                        });

                    b.Navigation("Action")
                        .IsRequired();

                    b.Navigation("Resource")
                        .IsRequired();
                });

            modelBuilder.Entity("ReadyGo.Identity.Domain.Aggregates.Session", b =>
                {
                    b.HasOne("ReadyGo.Identity.Domain.Aggregates.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("ReadyGo.Identity.Domain.ValueObjects.Device", "Device", b1 =>
                        {
                            b1.Property<Guid>("SessionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Device");

                            b1.HasKey("SessionId");

                            b1.ToTable("Sessions");

                            b1.WithOwner()
                                .HasForeignKey("SessionId");
                        });

                    b.OwnsOne("ReadyGo.Identity.Domain.ValueObjects.IpAddress", "IpAddress", b1 =>
                        {
                            b1.Property<Guid>("SessionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("IpAddress");

                            b1.HasKey("SessionId");

                            b1.ToTable("Sessions");

                            b1.WithOwner()
                                .HasForeignKey("SessionId");
                        });

                    b.Navigation("Device")
                        .IsRequired();

                    b.Navigation("IpAddress")
                        .IsRequired();
                });

            modelBuilder.Entity("ReadyGo.Identity.Domain.Entities.Authentication", b =>
                {
                    b.HasOne("ReadyGo.Identity.Domain.Aggregates.User", null)
                        .WithOne("Authentication")
                        .HasForeignKey("ReadyGo.Identity.Domain.Entities.Authentication", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("ReadyGo.Identity.Domain.ValueObjects.PasswordHash", "PasswordHash", b1 =>
                        {
                            b1.Property<Guid>("AuthenticationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("PasswordHash");

                            b1.HasKey("AuthenticationId");

                            b1.ToTable("Authentication");

                            b1.WithOwner()
                                .HasForeignKey("AuthenticationId");
                        });

                    b.OwnsOne("ReadyGo.Identity.Domain.ValueObjects.TFASecret", "TFASecret", b1 =>
                        {
                            b1.Property<Guid>("AuthenticationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("TFASecret");

                            b1.HasKey("AuthenticationId");

                            b1.ToTable("Authentication");

                            b1.WithOwner()
                                .HasForeignKey("AuthenticationId");
                        });

                    b.OwnsOne("ReadyGo.Identity.Domain.ValueObjects.TokenVersion", "TokenVersion", b1 =>
                        {
                            b1.Property<Guid>("AuthenticationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("TokenVersion");

                            b1.HasKey("AuthenticationId");

                            b1.ToTable("Authentication");

                            b1.WithOwner()
                                .HasForeignKey("AuthenticationId");
                        });

                    b.Navigation("PasswordHash")
                        .IsRequired();

                    b.Navigation("TFASecret")
                        .IsRequired();

                    b.Navigation("TokenVersion")
                        .IsRequired();
                });

            modelBuilder.Entity("ReadyGo.Identity.Domain.Entities.Authorization", b =>
                {
                    b.HasOne("ReadyGo.Identity.Domain.Aggregates.User", null)
                        .WithOne("Authorization")
                        .HasForeignKey("ReadyGo.Identity.Domain.Entities.Authorization", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ReadyGo.Identity.Domain.Entities.Entitlement", b =>
                {
                    b.HasOne("ReadyGo.Identity.Domain.Aggregates.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReadyGo.Identity.Domain.Aggregates.Scope", null)
                        .WithMany()
                        .HasForeignKey("ScopeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ReadyGo.Identity.Domain.Entities.Profile", b =>
                {
                    b.HasOne("ReadyGo.Identity.Domain.Aggregates.User", null)
                        .WithOne("Profile")
                        .HasForeignKey("ReadyGo.Identity.Domain.Entities.Profile", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("ReadyGo.Identity.Domain.ValueObjects.EmailAddress", "EmailAddress", b1 =>
                        {
                            b1.Property<Guid>("ProfileId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("EmailAddress");

                            b1.HasKey("ProfileId");

                            b1.ToTable("Profile");

                            b1.WithOwner()
                                .HasForeignKey("ProfileId");
                        });

                    b.OwnsOne("ReadyGo.Identity.Domain.ValueObjects.PersonName", "PersonName", b1 =>
                        {
                            b1.Property<Guid>("ProfileId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("PersonName");

                            b1.HasKey("ProfileId");

                            b1.ToTable("Profile");

                            b1.WithOwner()
                                .HasForeignKey("ProfileId");
                        });

                    b.Navigation("EmailAddress")
                        .IsRequired();

                    b.Navigation("PersonName")
                        .IsRequired();
                });

            modelBuilder.Entity("ReadyGo.Identity.Domain.Entities.RolePermission", b =>
                {
                    b.HasOne("ReadyGo.Identity.Domain.Entities.Authorization", null)
                        .WithMany()
                        .HasForeignKey("AuthorizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReadyGo.Identity.Domain.Aggregates.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ReadyGo.Identity.Domain.Entities.ScopePermission", b =>
                {
                    b.HasOne("ReadyGo.Identity.Domain.Entities.Authorization", null)
                        .WithMany()
                        .HasForeignKey("AuthorizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReadyGo.Identity.Domain.Aggregates.Scope", null)
                        .WithMany()
                        .HasForeignKey("ScopeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ReadyGo.Identity.Domain.Aggregates.User", b =>
                {
                    b.Navigation("Authentication")
                        .IsRequired();

                    b.Navigation("Authorization")
                        .IsRequired();

                    b.Navigation("Profile")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
